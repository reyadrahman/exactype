/*
 * Copyright 2015 Johan Walles <johan.walles@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // The dynamic version here is explicitly recommended by the Crashlytics docs:
        // https://docs.fabric.io/android/fabric/integration.html#modify-build-gradle
        //noinspection GradleDynamicVersion
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'

// Fabric / Crashlytics must come after the Android plugin
apply plugin: 'io.fabric'
repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'findbugs'
apply plugin: 'pmd'

// From: http://stackoverflow.com/questions/17097263/automatically-versioning-android-project-from-git-describe-with-android-studio-g
def getVersionCode = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'tag', '--list', 'version-*'
            standardOutput = code
        }
        return code.toString().split("\n").size()
    }
    catch (ignored) {
        return -1
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'sh', '-c',
                    'git describe --tags --dirty --first-parent --match="version-*"|sed \'s/^version-//\''
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null
    }
}

android {
    // NOTICE: These must match the values in .travis.yml
    // NOTICE: Do any changes to these on a branch; the Travis builds tend to start failing when
    // these values are changed!
    compileSdkVersion 23

    defaultConfig {
        applicationId "com.gmail.walles.johan.exactype"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode getVersionCode()
        versionName getVersionName()
    }

    lintOptions {
        // This test can be fine one day and not fine the next without us changing anything. Not
        // reliable enough, disable.
        //
        // Docs at http://tools.android.com/tips/lint-checks
        disable("GradleDependency")

        // Johan doesn't want to generate multiple icon sizes; most phones can resize an icon just
        // fine by itself.
        disable("IconMissingDensityFolder")

        // This warning wants ExactypeView to implement / call View.performClick() to play a sound
        // (but we want to do that ourselves if at all), report accessibility events (that the
        // keyboard was clicked, but not which key, which won't help anyone), and call any
        // registered OnClickListener (don't care, we can do that manually if deemed important in
        // the future). Feel free to question this reasoning, but until then I'll keep this
        // disabled.
        disable("ClickableViewAccessibility")

        // This one just fails randomly whenever Google releases an update, begone flaky test
        disable("OldTargetApi")

        abortOnError true
        warningsAsErrors true

        textOutput "stdout"
        textReport true

        htmlReport true
        htmlOutput file("$project.buildDir/reports/lint.html")
    }

    signingConfigs {
        // See: https://stackoverflow.com/a/21020469/473672
        release {
            // Set these values as A=B in ~/.gradle/gradle.properties
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

task pmd (type: Pmd, dependsOn: "assembleDebug") {
    ruleSetFiles = files("${project.rootDir}/config/pmd-ruleset.xml")
    ignoreFailures = false
    consoleOutput = true
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
}

// Getting text output from Findbugs is broken in the Gradle plugin
// (https://issues.gradle.org/browse/GRADLE-2994), so if people want to diagnose a FindBugs
// problem they'll just have to run "gradle check" locally.
//
// When that problem is fixed we should update this code to print a text report on stdout.
task findbugs(type: FindBugs) {
    reports {
        // What we really want here is text on stdout but that doesn't work:
        // https://issues.gradle.org/browse/GRADLE-2994
        xml.enabled = false
        html.enabled = true
    }

    ignoreFailures = false
    effort = "max"
    reportLevel = "low"
    excludeFilter = new File("${project.rootDir}/config/findbugs-filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

check.doLast {
    project.tasks.getByName("pmd").execute()
    project.tasks.getByName("findbugs").execute()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:23.3.0'
    implementation 'com.jakewharton.timber:timber:4.6.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.1@aar') {
        transitive = true
    }

    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:1.10.19"
    testImplementation "org.powermock:powermock-core:1.6.2"
    testImplementation "org.powermock:powermock-module-junit4:1.6.2"
    testImplementation "org.powermock:powermock-api-mockito:1.6.2"
}
